import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'idea'
	id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'net.darkhax.curseforgegradle' version '1.+'
    id 'com.modrinth.minotaur' version '2.+'
}

version = "${project.minecraft_version}-${project.version}"
group = 'com.christofmeg.${mod_name}'
archivesBaseName = 'ic2cuumatter'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
	mappings channel: 'parchment', version: "${parchment_version}-${minecraft_version}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
			property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                ic2cuumatter {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
}

repositories {
	maven {
    // location of the maven that hosts JEI files
		name = "Progwml6 maven"
		url = "https://dvs1.progwml6.com/files/maven/"
		content {
            includeGroup "mezz.jei"
        }
	}
	maven {
    // location of a maven mirror for JEI files, as a fallback
		name = "ModMaven"
		url = "https://modmaven.dev/"
		content {
            includeGroup "mezz.jei"
        }
	}
	maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

}

dependencies {
	minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // IC2 CLASSIC
    if (project.hasProperty('ic2_version')) {
        implementation fg.deobf("curse.maven:ic2_classic-242942:${ic2_version}")
    }
	// JEI
    if (project.hasProperty('jei_version')) {
		compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
		compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))
		runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))
    }
    // CATALOGUE
    if (project.hasProperty('catalogue_version')) {
        implementation fg.deobf("curse.maven:catalogue-459701:${catalogue_version}")
    }
    // REI
    if (project.hasProperty('rei_version')) {
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:11.+"))
        compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:11.+"))

        implementation fg.deobf("curse.maven:roughly-enough-items-310111:${rei_version}")

        runtimeOnly fg.deobf("curse.maven:roughly-enough-items-hacks-521393:${rei_hacks_version}")
        runtimeOnly fg.deobf("curse.maven:cloth-config-348521:${cloth_config_version}")
        runtimeOnly fg.deobf("curse.maven:architectury-api-419699:${architectury_version}")
    }

}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "ic2cuumatter",
                "Specification-Vendor"    : "Christofmeg",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Christofmeg",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

processResources {
	exclude '.cache'
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}


if (project.hasProperty('cf_id')) {
    tasks.register('publishCurseForge', TaskPublishCurseForge) {
        apiToken = file('../API Tokens/ic2cuumatter.md')
        def projectId = "${cf_id}".toString()
        def mainFile = upload(projectId, file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) as Object
        mainFile.changelogType = 'markdown'
        mainFile.changelog = file('changelog.md')
        mainFile.addGameVersion('Client', 'Server')
        mainFile.releaseType = "${release_type}"
        "${forge_release_versions}".split(',').each {
            mainFile.addGameVersion("${it}")
        }
        mainFile.addRequirement("ic2-classic")
        mainFile.addOptional("roughly-enough-items-hacks")
        mainFile.addOptional("roughly-enough-items")
        mainFile.addOptional("catalogue")
        mainFile.addOptional("jei")
    }
}

if (project.hasProperty('modrinth_id')) {
    modrinth {
        token = file('../API Tokens/modrinth.md').text
        projectId = "${modrinth_id}"
        versionName = getArchivesBaseName() + "-" + getVersion()
        versionType = "${release_type}"
        changelog = file('changelog.md').text
        uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")
        gameVersions = "${forge_release_versions}".split(",") as List<String>
        dependencies {
            optional.project("roughly-enough-items-hacks")
            optional.project("rei")
            optional.project("jei")
        }
    }
}